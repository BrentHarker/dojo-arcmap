//>>built
require({cache:{"url:esri/views/vectorTiles/renderers/Shaders.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\n\x3c!--\n  Add your GLSL snippets to this file. You should start from\n  importing your old GLSL files. For instance, if you have a\n  file such as myShader.vs.glsl you should create a new \x3csnippet name\x3d"myShaderVS"\x3e\n  and then copy and paste the GLSL source as the content. You will then convert your\n  code to use the {@link module:esri/views/vectorTiles/renderers/vtShaderSnippets vtShaderSnippets}\n  instance to access the GLSL code, instead of importing it directly with require("dojo/text!...").\n--\x3e\n\x3csnippets\x3e\n\n  \x3csnippet name\x3d"foobarVS"\x3e\n  \x3c/snippet\x3e\n\n  \x3csnippet name\x3d"foobarFS"\x3e\n  \x3c/snippet\x3e\n\n\x3c/snippets\x3e\n\n',
"url:esri/views/vectorTiles/renderers/shaders/background.vs.glsl":"attribute vec2 a_pos;\n\nuniform highp mat4 u_transformMatrix;\nuniform mediump vec2 u_normalized_origin;\nuniform mediump float u_coord_range;\nuniform mediump float u_depth;\n\nvoid main() {\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(u_coord_range * a_pos, 0.0, 1.0);\n}\n","url:esri/views/vectorTiles/renderers/shaders/background.fs.glsl":"uniform lowp vec4 u_color;\nvoid main() {\n  gl_FragColor \x3d u_color;\n}",
"url:esri/views/vectorTiles/renderers/shaders/lineShader.vs.glsl":"/* The implementation of the renderer is based on the article and implementation of MB described here:\n* https://www.mapbox.com/blog/drawing-antialiased-lines/\n*/\n\nattribute vec2 a_pos;\nattribute vec4 a_offsetAndNormal;\nattribute float a_accumulatedDistance;\n\n// the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate\n// relative to the tile's upper left corner\n// the extrusion vector.\nuniform highp mat4 u_transformMatrix;\n// the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation\nuniform highp mat4 u_extrudeMatrix;\n// u_normalized_origin is the tile's upper left corner given in normalized coordinates\nuniform highp vec2 u_normalized_origin;\n// the z of the layer. Given by the order of the layers in the style\nuniform mediump float u_depth;\n// the inset and outset of the line\nuniform mediump float u_lineHalfWidth;\n// the interpolated normal to the line. the information is packed into the two LSBs of the vertex coordinate\nvarying mediump vec2 v_normal;\n// the accumulated distance along the line. We need this information in order to render the dashes.\nvarying highp float v_accumulatedDistance;\n\nconst float scale \x3d 1.0 / 31.0;\n\nvoid main()\n{\n  v_normal \x3d a_offsetAndNormal.zw * scale;\n\n  // calculate the relative distance from the centerline to the edge of the line. Since offset is given in integers (for the\n  // sake of using less attribute memory, we need to scale it back to the original range of ~ 0: 1)\n  mediump vec2 dist \x3d u_lineHalfWidth * a_offsetAndNormal.xy * scale;\n\n  // transform the vertex\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * vec4(dist, 0.0, 0.0);\n\n  // the accumulated distance will be used to calculate the dashes (or the no-data...)\n  v_accumulatedDistance \x3d a_accumulatedDistance;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/lineShader.fs.glsl":"/* The implementation of the renderer is based on the article and implementation of MB described here:\n* https://www.mapbox.com/blog/drawing-antialiased-lines/\n*/\n\nuniform mediump float u_lineHalfWidth;\nuniform lowp vec4 u_color;\nuniform mediump vec2 u_dasharray;\nuniform lowp float u_blur;\n\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\n\nvoid main()\n{\n  // dist represent the distance of the fragment from the line. 1.0 or -1.0 will be the values on the edge of the line,\n  // and any value in between will be inside the line (the sign represent the direction - right or left).\n  // since u_linewidth.s (half line width) is represented in pixels, dist is also given in pixels\n  mediump float fragDist \x3d length(v_normal) * u_lineHalfWidth;\n\n  // calculate the alpha given the difference between the line-width and the distance of the fragment from the center-line.\n  // We need to count for both sides of the line.\n  lowp float alpha \x3d clamp( min(fragDist + u_blur + 1.0, u_lineHalfWidth - fragDist) / u_blur, 0.0, 1.0);\n\n  // now calculate the dashes given the accumulated distance of the line:\n  // start with calculating a normalized position along the line\n  lowp float dashPos \x3d  mod(v_accumulatedDistance, u_dasharray.x + u_dasharray.y);\n\n  // calculate the contribution to the alpha of the dash part. It is provided by the shortest portion of the position along the dash.\n  // we must clamp since the value might be bigger than 1 or smaller than zero (when over a dash).\n  //   | \x3c--- pos along the dash part\n  // -------_______-------_______\n  // when the dashPos is over the 'gap' part of the dash u_dasharray.x - dashPos is negative and therefore the alpha will\n  // get clamped to zero.\n  // when u_dasharray.x - dashPos is positive, or when dashPos is smaller than 1.0, it gives us a soft edge to each dash part.\n  // along the direction of the line.\n  lowp float dashAlpha \x3d clamp( min(dashPos, u_dasharray.x - dashPos), 0.0, 1.0);\n\n  // if we don't have a no-data part to the dash then it is a solid line\n  dashAlpha \x3d max(sign(-u_dasharray.y), dashAlpha); //sign(-u_dasharray.y) \x3e 0.0 ? 1.0 : dashAlpha;\n  // finally multiply the fragment's alpha by the calculated dash-alpha\n  alpha *\x3d dashAlpha;\n\n  // output the fragment color\n gl_FragColor \x3d alpha * u_color;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/patternLineShader.vs.glsl":"attribute vec2 a_pos;\nattribute vec4 a_offsetAndNormal;\nattribute float a_accumulatedDistance;\n\n// the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate\n// relative to the tile's upper left corner\n// the extrusion vector.\nuniform highp mat4 u_transformMatrix;\n// the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation\nuniform highp mat4 u_extrudeMatrix;\n// u_normalized_origin is the tile's upper left corner given in normalized coordinates\nuniform highp vec2 u_normalized_origin;\n// the z of the layer. Given by the order of the layers in the style\nuniform mediump float u_depth;\n// the inset and outset of the line\nuniform mediump float u_lineHalfWidth;\n// the interpolated normal to the line. the information is packed into the two LSBs of the vertex coordinate\nvarying mediump vec2 v_normal;\n// the accumulated distance along the line. We need this information in order to render the dashes.\nvarying highp float v_accumulatedDistance;\n\nconst float scale \x3d 1.0 / 31.0;\n\nvoid main()\n{\n  v_normal \x3d a_offsetAndNormal.zw * scale;\n\n  // calculate the relative distance from the centerline to the edge of the line. Since offset is given in integers (for the\n  // sake of using less attribute memory, we need to scale it back to the original range of ~ 0: 1)\n  // sake of using less attribute memory, we need to scale it back to the original range of ~ 0: 1)\n  mediump vec2 dist \x3d u_lineHalfWidth * a_offsetAndNormal.xy * scale;\n\n  // transform the vertex\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * vec4(dist, 0.0, 0.0);\n\n  // the accumulated distance will be used to calculate the dashes (or the no-data...)\n  v_accumulatedDistance \x3d a_accumulatedDistance;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/patternLineShader.fs.glsl":"uniform mediump float u_lineHalfWidth;\nuniform lowp float u_blur;\nuniform lowp float u_opacity;\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform mediump vec2 u_spriteSize;\nuniform sampler2D u_texture;\n\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\n\n// Horizontal scale is used to scale the horizontal texture coordinate v_normal.x before adding it as an offset to the\n// accumulated distance. Most vertices will have v_normal.x \x3d\x3d 0, because the pattern must be sampled only depending on\n// the v_accumulatedDistance value. But tessellation at caps can have vertices with v_normal.x !\x3d 0, thus allowing to\n// \"keep moving\" for a few more pixel even when the line has ended or has not started yet.\nconst mediump float tileCoordRatio \x3d 8.0;\n\nvoid main()\n{\n  // dist represent the distance of the fragment from the line. 1.0 or -1.0 will be the values on the edge of the line,\n  // and any value in between will be inside the line (the sign represent the direction - right or left).\n  // since u_linewidth.s (half line width) is represented in pixels, dist is also given in pixels\n  mediump float fragDist \x3d length(v_normal) * u_lineHalfWidth;\n\n  // calculate the alpha given the difference between the line-width and the distance of the fragment from the center-line.\n  // We need to count for both sides of the line.\n  lowp float alpha \x3d clamp( min(fragDist + u_blur + 1.0, u_lineHalfWidth - fragDist) / u_blur, 0.0, 1.0);\n  // add the line's opacity to the alpha\n  alpha *\x3d u_opacity;\n\n  // we need to calculate the relative portion of the line texture along the line given the accumulated distance aliong the line\n  // The computed value should is anumber btween 0 and 1 which will later be used to interpolate btween the BR and TL values\n  mediump float relativeTexX \x3d mod((v_accumulatedDistance + v_normal.x * u_lineHalfWidth * tileCoordRatio) / u_spriteSize.x, 1.0);\n\n  // in order to calculate the texture coordinates prependicular to the line (Y axis), we use the interpolated normal values\n  // which range from -1.0 to 1.0. On the line's centerline, the value of the interpolated normal is 0.0, however the relative\n  // texture value shpould be 0.5 (given that at the bottom of the line, the texture coordinate must be equal to 0.0)\n  // (TL) ---------------------------      --\x3e left edge of line. Interpolatedf normal is 1.0\n  //              | -\x3e linwe-width / 2\n  //      - - - - - - - - - - - - - -\n  //              | -\x3e linwe-width / 2\n  //      ---------------------------- (BR)--\x3e right edge of line. Interpolatedf normal is -1.0\n\n  mediump float relativeTexY \x3d 0.5 + (v_normal.y * u_lineHalfWidth / (0.5 * u_spriteSize.y));\n\n  // claculate the actual texture coordinates by interpolating between the TL/BR pattern coordinates\n  mediump vec2 texCoord \x3d mix(u_pattern_tl, u_pattern_br, vec2(relativeTexX, relativeTexY));\n\n  // get the color from the texture\n  lowp vec4 color \x3d texture2D(u_texture, texCoord);\n\n  // 'un-premultiply' the color\n  lowp float inv_alpha \x3d (1.0 / clamp(color.a, 0.00390625, 1.0));\n  // finally write the fragment value\n  gl_FragColor \x3d alpha * color;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/lineJoinShader.vs.glsl":"attribute vec2 a_pos;\n\nuniform highp mat4 u_transformMatrix;\nuniform highp vec2 u_normalized_origin;\nuniform highp float u_depth;\nuniform highp vec2 u_screen;\nuniform mediump float u_size;\nuniform mediump float u_pixelRatio;\n\nvarying mediump vec2 v_vertexPosition;\n\nvoid main()\n{\n  gl_PointSize \x3d u_pixelRatio * u_size;\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0);\n\n  // calculate the vertex position in pixels (we need to add one in order to shift the origin from the center of the viewport)\n  v_vertexPosition \x3d (gl_Position.xy + 1.0) * u_screen;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/lineJoinShader.fs.glsl":"uniform lowp vec4 u_color;\nuniform mediump float u_lineHalfWidth;\nuniform mediump float u_oneOverPixelRatio;\n\nvarying mediump vec2 v_vertexPosition;\n\nvoid main()\n{\n  // get the distance of the current fragment from the actual vertex\n  mediump float fragDist \x3d length(v_vertexPosition - u_oneOverPixelRatio * gl_FragCoord.xy);\n\n  // rounding the quare: calculate the alpha given the difference between the line-width and the distance of the fragment\n  // from the center-line. We will end up with a nice round circle with a soft edge.\n  lowp float alpha \x3d clamp(u_lineHalfWidth - fragDist, 0.0, 1.0);\n\n  // finally output the fragment color\n  gl_FragColor \x3d alpha * u_color;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/lineJoinQuadShader.vs.glsl":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\n\nuniform highp mat4 u_transformMatrix;\nuniform highp mat4 u_extrudeMatrix;\nuniform highp vec2 u_normalized_origin;\nuniform highp float u_depth;\n// The width/height of the screen\nuniform mediump vec2 u_screen;\n// u_size is the diameter of the join in tile units\nuniform mediump float u_size;\n\nvarying mediump vec2 v_fragmentOffset;\n\nvoid main()\n{\n  // calculate the offset in pixels from the join's center to the vertex\n  highp vec2 dist \x3d u_size * a_vertexOffset;\n\n  // calculate the position of the join's center in normalized coordinates\n  highp vec4 center_pos \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0);\n\n  // offset in normalized display units\n  highp vec4 vertex_offset \x3d u_extrudeMatrix * vec4(dist, 0.0, 0.0);\n\n  // calculate the vertex offset in windows coordinates\n  v_fragmentOffset \x3d u_screen * vertex_offset.xy;\n\n  // finally calculate the vertex position\n  gl_Position \x3d center_pos + vertex_offset;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/lineJoinQuadShader.fs.glsl":"uniform lowp vec4 u_color;\nuniform mediump float u_lineHalfWidth;\n\nvarying mediump vec2 v_fragmentOffset;\n\nvoid main()\n{\n  // Calculate the antialiasing fade factor\n  lowp float alpha \x3d clamp(u_lineHalfWidth * u_lineHalfWidth - dot(v_fragmentOffset, v_fragmentOffset), 0.0, 1.0);\n  //lowp float alpha  \x3d 1.0 - smoothstep(u_lineHalfWidth - 0.25, u_lineHalfWidth + 0.25, dist);\n  // YF: if needed w can also use a smoothstep around the edge of the circle and use a single pixel or so as the edge width\n\n  // finally output the fragment color\n  gl_FragColor \x3d alpha * u_color;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/solidFillShader.vs.glsl":"attribute vec2 a_pos;\n\nuniform highp mat4 u_transformMatrix;\nuniform highp vec2 u_normalized_origin;\nuniform mediump float u_depth;\n\nvoid main()\n{\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0, 1.0);\n}\n","url:esri/views/vectorTiles/renderers/shaders/solidFillShader.fs.glsl":"uniform lowp vec4 u_color;\nvoid main()\n{\n  gl_FragColor \x3d u_color;\n}","url:esri/views/vectorTiles/renderers/shaders/patternFillShader.vs.glsl":"uniform highp mat4 u_transformMatrix;\nuniform highp vec2 u_normalized_origin;\nuniform mediump float u_depth;\nuniform mediump mat3 u_pattern_matrix; // can we use meduim precision??\n\nattribute vec2 a_pos;\n\nvarying mediump vec2 v_tileTextureCoord;\n\nvoid main()\n{\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0);\n  // calculate the texture coordinates of the current vertex. It will of course get interpolated.\n  // The pattern matrix is a 3x3 scale matrix which 'tiles' the texture inside the tile, translating from tile coordinates\n  // (-4k to 8k -1) to texture coordinates.\n  v_tileTextureCoord \x3d (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/patternFillShader.fs.glsl":"uniform lowp float u_opacity;\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform sampler2D u_texture;\n\nvarying mediump vec2 v_tileTextureCoord;\n\nvoid main()\n{\n  // normalize the calculated texture coordinate such that it fits in the range of 0 to 1.\n  mediump vec2 normalizedTextureCoord \x3d mod(v_tileTextureCoord, 1.0);\n  // interpolate the image coordinate between the top-left and the bottom right to get the actual position to sample.\n  // after normalizing the position, we get a value ranging between 0 and 1 which refers to the entire texture, however\n  // we need to only sample from area that has our sprite in the mosaic.\n  mediump vec2 samplePos \x3d mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\n  // sample the sprite mosaic\n  lowp vec4 color \x3d texture2D(u_texture, samplePos);\n  gl_FragColor \x3d u_opacity * color;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/fillOutlineShader.vs.glsl":"attribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_xnormal;\n\nuniform highp mat4 u_transformMatrix;\nuniform highp mat4 u_extrudeMatrix;\nuniform highp vec2 u_normalized_origin;\nuniform mediump float u_depth;\nuniform mediump float u_outline_width;\n\nvarying lowp vec2 v_normal;\n\nconst float scale \x3d 1.0 / 15.0;\n\nvoid main()\n{\n  v_normal \x3d a_xnormal;\n\n   // calculate the relative distance from the centerline to the edge of the line. Since offset is given in integers (for the\n    // sake of using less attribute memory, we need to scale it back to the original range of ~ 0: 1)\n  mediump vec4 dist \x3d vec4(u_outline_width * a_offset * scale, 0.0, 0.0);\n\n  // Remove the texture normal bit of the position before scaling it with the\n  // model/view matrix. Add the extrusion vector *after* the model/view matrix\n  // because we're extruding the line in pixel space, regardless of the current\n  // tile's zoom level.\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * dist;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/fillOutlineShader.fs.glsl":"uniform lowp vec4 u_color;\nvarying mediump vec2 v_normal;\n\nvoid main()\n{\n  // Calculate the distance of the pixel from the line in pixels.\n  lowp float dist \x3d abs(v_normal.y);\n\n  lowp float alpha \x3d smoothstep(1.0, 0.0, dist);\n  gl_FragColor \x3d alpha * u_color;\n}\n","url:esri/views/vectorTiles/renderers/shaders/iconShader.vs.glsl":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_tex;\nattribute vec4 a_levelInfo;\n\n// the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate\n// relative to the tile's upper left corner\n// the extrusion vector.\nuniform highp mat4 u_transformMatrix;\n// the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation\nuniform highp mat4 u_extrudeMatrix;\n// u_normalized_origin is the tile's upper left corner given in normalized coordinates\nuniform highp vec2 u_normalized_origin;\n// the size of the mosaic given in pixels\nuniform vec2 u_mosaicSize;\n// the z of the layer. Given by the order of the layers in the style\nuniform mediump float u_depth;\n// the map's rotation from the north\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\n// indicate whether the current set of iconst should be kept upright when the map is rotated\nuniform lowp float u_keepUpright;\n// the rate of the change in the opacity (fade) of the icons\nuniform mediump float u_fadeSpeed;\n// the low level we transition (to/from)\nuniform mediump float u_minfadeLevel;\n// the high level we transition (to/from)\nuniform mediump float u_maxfadeLevel;\n// the amount of fade given teh current time past the last recorded level\nuniform mediump float u_fadeChange;\n// the opacity of the layer given by the painter\nuniform mediump float u_opacity;\n// the interpolated texture coordinate value to be used by the fragment shader in order to sample the sprite texture\nvarying lowp vec2 v_tex;\n// the calculated transparency to be applied by the fragment shader. It is incorporating both the fade as well as the\n// opacity of the layer given by the painter\nvarying lowp float v_transparency;\n\n// the vertex offsets are given in integers, therefore in order to maintain a reasonable precission we multiply the values\n// by 16 and then at the shader devide by the same number\nconst float offsetPrecision \x3d 1.0 / 32.0;\n\nvoid main()\n{\n  mediump float a_labelMinLevel \x3d a_levelInfo[0];\n  mediump float a_angle        \x3d a_levelInfo[1];\n  mediump float a_minLevel    \x3d a_levelInfo[2];\n  mediump float a_maxLevel    \x3d a_levelInfo[3];\n\n  // if the given vertex should not be visible simply clip it by adding it a value that will push it outside the clipping plane\n  mediump float delta_z \x3d 0.0;\n\n  // If the label rotates with the map, and if the rotated label is upside down, hide it\n  mediump float rotated \x3d mod(a_angle - u_mapRotation, 256.0);\n  delta_z +\x3d (1.0 - step(u_keepUpright,0.0)) * step(65.0,rotated) * (1.0 - step(193.0,rotated)); //ie. z +\x3d (flip \x3e 0) \x26\x26 (65 \x3c\x3d rotated) \x26\x26 (rotated \x3c 193)\n\n  // u_level is the current service level adjusted for the change in font size\n  delta_z +\x3d 1.0 - step(a_minLevel, u_level); // Test if (level \x3c minLevel)\n  delta_z +\x3d step(a_maxLevel, u_level); // Test if (maxLevel \x3c\x3d level)\n\n  // calculate the alpha given the change in the fade and the fade-speed\n  lowp float alpha \x3d clamp((u_fadeChange - a_labelMinLevel) / u_fadeSpeed, 0.0, 1.0);\n\n  // if the speed is positive we are zooming in and therefore we need to 'fade-in'. Else we need to 'fade-out'\n  v_transparency \x3d (u_fadeSpeed \x3e\x3d 0.0 ? alpha : 1.0 - alpha);\n\n  // now deal with the min/max fade-levels. If we exceeded the level we simply snap to 0 or 1\n  if (u_maxfadeLevel \x3c a_labelMinLevel)\n  {\n      v_transparency \x3d 0.0;\n  }\n  if (u_minfadeLevel \x3e\x3d a_labelMinLevel)\n  {\n      v_transparency \x3d 1.0;\n  }\n\n  // if label had been faded out, clip it\n  delta_z +\x3d step(v_transparency, 0.0);\n\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * vec4(offsetPrecision * a_vertexOffset, delta_z, 0.0);\n  v_tex \x3d a_tex.xy / u_mosaicSize;\n\n  v_transparency *\x3d u_opacity;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/iconShader.fs.glsl":"uniform lowp sampler2D u_texture;\nvarying lowp vec2 v_tex;\nvarying lowp float v_transparency;\n\nvoid main()\n{\n  lowp vec4 color \x3d texture2D(u_texture, v_tex);\n  gl_FragColor \x3d v_transparency * color;\n}\n","url:esri/views/vectorTiles/renderers/shaders/sdfShader.vs.glsl":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_tex;\nattribute vec4 a_levelInfo;\n\n// attribute bool a_visible; // --\x3e a one bit controlling the visibility of the vertex\n\n// the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate\n// relative to the tile's upper left corner\n// the extrusion vector.\nuniform highp mat4 u_transformMatrix;\n// the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation\nuniform highp mat4 u_extrudeMatrix;\n// u_normalized_origin is the tile's upper left corner given in normalized coordinates\nuniform highp vec2 u_normalized_origin;\n// the size of the mosaic given in pixels\nuniform vec2 u_mosaicSize;\n// the z of the layer. Given by the order of the layers in the style\nuniform mediump float u_depth;\n// the map's rotation from the north\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\n// indicate whether the current set of iconst should be kept upright when the map is rotated\nuniform lowp float u_keepUpright;\n// the rate of the change in the opacity (fade) of the icons\nuniform mediump float u_fadeSpeed;\n// the low level we transition (to/from)\nuniform mediump float u_minfadeLevel;\n// the high level we transition (to/from)\nuniform mediump float u_maxfadeLevel;\n// the amount of fade given teh current time past the last recorded level\nuniform mediump float u_fadeChange;\n// the opacity of the layer given by the painter\nuniform mediump float u_opacity;\n// the interpolated texture coordinate value to be used by the fragment shader in order to sample the sprite texture\nvarying lowp vec2 v_tex;\n// the calculated transparency to be applied by the fragment shader. It is incorporating both the fade as well as the\n// opacity of the layer given by the painter\nvarying lowp float v_transparency;\n\n// the vertex offsets are given in integers, therefore in order to maintain a reasonable precission we multiply the values\n// by 16 and then at the shader devide by the same number\nconst float offsetPrecision \x3d 1.0 / 32.0;\n\nvoid main()\n{\n  mediump float a_labelMinLevel \x3d a_levelInfo[0];\n  mediump float a_angle        \x3d a_levelInfo[1];\n  mediump float a_minLevel    \x3d a_levelInfo[2];\n  mediump float a_maxLevel    \x3d a_levelInfo[3];\n\n  // if the given vertex should not be visible simply clip it by adding it a value that will push it outside the clipping plane\n  mediump float delta_z \x3d 0.0;\n\n  // TODO: force clipping the vertex in case that the vertex isn't visible\n  //delta_z +\x3d a_visible ? 0.0 : 1.0;\n\n  // If the label rotates with the map, and if the rotated label is upside down, hide it\n  mediump float rotated \x3d mod(a_angle - u_mapRotation, 256.0);\n  delta_z +\x3d (1.0 - step(u_keepUpright, 0.0)) * step(65.0, rotated) * (1.0 - step(193.0, rotated)); //ie. z +\x3d (flip \x3e 0) \x26\x26 (65 \x3c\x3d rotated) \x26\x26 (rotated \x3c 193)\n\n  // u_level is the current service level adjusted for the change in font size\n  delta_z +\x3d 1.0 - step(a_minLevel, u_level); // Test if (level \x3c minLevel)\n  delta_z +\x3d step(a_maxLevel, u_level); // Test if (maxLevel \x3c\x3d level)\n\n  // calculate the alpha given the change in the fade and the fade-speed\n  lowp float alpha \x3d clamp((u_fadeChange - a_labelMinLevel) / u_fadeSpeed, 0.0, 1.0);\n\n  // if the speed is positive we are zooming in and therefore we need to 'fade-in'. Else we need to 'fade-out'\n  v_transparency \x3d (u_fadeSpeed \x3e\x3d 0.0 ? alpha : 1.0 - alpha);\n\n  // now deal with the min/max fade-levels. If we exceeded the level we simply snap to 0 or 1\n  if (u_maxfadeLevel \x3c a_labelMinLevel)\n  {\n      v_transparency \x3d 0.0;\n  }\n  if (u_minfadeLevel \x3e\x3d a_labelMinLevel)\n  {\n      v_transparency \x3d 1.0;\n  }\n\n  // if label has been faded out, clip it\n  delta_z +\x3d step(v_transparency, 0.0);\n\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * vec4(offsetPrecision * a_vertexOffset, delta_z, 0.0);\n  v_tex \x3d a_tex.xy / u_mosaicSize;\n\n  v_transparency *\x3d u_opacity;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/sdfShader.fs.glsl":"uniform lowp sampler2D u_texture;\nuniform lowp vec4 u_color;\nuniform mediump float u_edgeDistance;\nuniform mediump float u_edgeWidth;\n\nvarying lowp vec2 v_tex;\nvarying lowp float v_transparency;\n\n// this is taken from http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\n// and https://www.mapbox.com/blog/text-signed-distance-fields/\n// http://metalbyexample.com/rendering-text-in-metal-with-signed-distance-fields/\n\nvoid main()\n{\n  // read the distance from the SDF texture\n  lowp float dist \x3d texture2D(u_texture, v_tex).a;\n  // use a smooth-step in order to calculate the geometry of the shape given by the distance field\n  mediump float alpha \x3d smoothstep(u_edgeDistance - u_edgeWidth, u_edgeDistance + u_edgeWidth, dist) * v_transparency;\n\n  gl_FragColor \x3d alpha * u_color;\n\n// YF: this code allow having both a fill and an outline colors combined in a single pass\n//  lowp float geometryAlpha \x3d smoothstep(0.75 - 0.21, 0.75 + 0.21, dist) * v_transparency;\n//  lowp vec4 geometryColor \x3d vec4(u_color.rgb, geometryAlpha * u_color.a);\n//\n//  if (true) {\n//    lowp float haloAlpha \x3d smoothstep(0.0 - 0.1, 0.0 + 0.1, dist) * v_transparency;\n//    lowp vec4 haloColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\n//    haloColor \x3d vec4(haloColor.rgb, haloAlpha);\n//\n//    // calculate the composite color\n//    lowp float compositeAlpha \x3d geometryColor.a + haloColor.a * (1.0 - geometryColor.a);\n//    lowp vec3 compositeColor \x3d vec3(geometryColor) * geometryColor.a + vec3(haloColor) * haloColor.a * (1.0 - geometryColor.a);\n//    compositeColor /\x3d compositeAlpha;\n//    gl_FragColor \x3d vec4(compositeColor, compositeAlpha);\n//  }\n//  else {\n//    gl_FragColor \x3d geometryColor;\n//  }\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/tileInfo.vs.glsl":"attribute vec2 a_pos;\n\nuniform highp mat4 u_transformMatrix;\nuniform mediump vec2 u_normalized_origin;\nuniform mediump float u_depth;\nuniform mediump float u_coord_ratio;\nuniform mediump vec2 u_delta; // in tile coordinates\nuniform mediump vec2 u_dimensions; // in tile coordinates\n\nvarying mediump vec2 v_tex;\n\nvoid main() {\n  mediump vec2 offests \x3d u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(offests, 0.0, 1.0);\n\n  v_tex \x3d a_pos;\n}\n",
"url:esri/views/vectorTiles/renderers/shaders/tileInfo.fs.glsl":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\n\nvoid main(void) {\n  lowp vec4 color \x3d texture2D(u_texture, v_tex);\n  gl_FragColor \x3d 0.75 * color;\n}\n"}});
define("require exports ../../webgl/ShaderSnippets dojo/text!./Shaders.xml dojo/text!./shaders/background.vs.glsl dojo/text!./shaders/background.fs.glsl dojo/text!./shaders/lineShader.vs.glsl dojo/text!./shaders/lineShader.fs.glsl dojo/text!./shaders/patternLineShader.vs.glsl dojo/text!./shaders/patternLineShader.fs.glsl dojo/text!./shaders/lineJoinShader.vs.glsl dojo/text!./shaders/lineJoinShader.fs.glsl dojo/text!./shaders/lineJoinQuadShader.vs.glsl dojo/text!./shaders/lineJoinQuadShader.fs.glsl dojo/text!./shaders/solidFillShader.vs.glsl dojo/text!./shaders/solidFillShader.fs.glsl dojo/text!./shaders/patternFillShader.vs.glsl dojo/text!./shaders/patternFillShader.fs.glsl dojo/text!./shaders/fillOutlineShader.vs.glsl dojo/text!./shaders/fillOutlineShader.fs.glsl dojo/text!./shaders/iconShader.vs.glsl dojo/text!./shaders/iconShader.fs.glsl dojo/text!./shaders/sdfShader.vs.glsl dojo/text!./shaders/sdfShader.fs.glsl dojo/text!./shaders/tileInfo.vs.glsl dojo/text!./shaders/tileInfo.fs.glsl".split(" "),function(c,
F,d,e,f,g,h,k,l,m,n,p,q,r,t,u,v,w,x,y,z,A,B,C,D,E){function a(a,c){b+='\x3csnippet name\x3d"'+a+'"\x3e\x3c![CDATA[';b+=c;b+="]]\x3e\x3c/snippet\x3e"}var b="",b=b+'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e',b=b+"\x3csnippets\x3e";a("backgroundVS",f);a("backgroundFS",g);a("lineShaderVS",h);a("lineShaderFS",k);a("patternLineShaderVS",l);a("patternLineShaderFS",m);a("lineJoinShaderVS",n);a("lineJoinShaderFS",p);a("lineJoinQuadShaderVS",q);a("lineJoinQuadShaderFS",r);a("solidFillShaderVS",t);
a("solidFillShaderFS",u);a("patternFillShaderVS",v);a("patternFillShaderFS",w);a("fillOutlineShaderVS",x);a("fillOutlineShaderFS",y);a("iconShaderVS",z);a("iconShaderFS",A);a("sdfShaderVS",B);a("sdfShaderFS",C);a("tileInfoVS",D);a("tileInfoFS",E);b+="\x3c/snippets\x3e";c=new d;return d.parse(b,c),d.parse(e,c),c});