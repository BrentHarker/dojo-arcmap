require({cache:{
'url:esri/views/3d/webgl-engine/materials/WaterMaterial.xml':"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<snippets>\n\n<snippet name=\"vertexShaderWater\"><![CDATA[\n  $vsprecisionf\n\n\tuniform mat4 proj;\n\tuniform mat4 view;\n\tuniform mat4 model;\n\tattribute vec3 $position;\n\tvarying vec3 vpos;\n\n\tvoid main(void) {\n\t\tvpos = (model * vec4($position, 1.0)).xyz;\n\t\tgl_Position = proj * view * vec4(vpos, 1.0);\n\t}\n]]></snippet>\n\n<snippet name=\"fragmentShaderWater\"><![CDATA[\n\t$fsprecisionf\n\n\tuniform vec3 color;\n\tuniform float scale;\n\tuniform float speed;\n\n\tuniform vec4 lightAmbient;\n\tuniform vec4 lightDiffuse;\n\tuniform vec4 lightSpecular;\n\tuniform vec3 lightDirection;\n\n\tuniform vec3 camPos;\n\n\tuniform sampler2D noiseTex;\n\tuniform sampler2D reflTex;\n\n\tuniform sampler2D depthTex;\n\tuniform int shadowMapNum;\n\tuniform vec4 shadowMapDistance;\n\tuniform mat4 shadowMapMatrix[4];\n\tuniform float depthHalfPixelSz;\n\n\tvarying vec3 vpos;\n\n\t$evalShadow\n\n\t$normal2envTC\n\n\tvec2 rotate(vec2 pos, float angle) {\n\t\tfloat c = cos(angle);\n\t\tfloat s = sin(angle);\n\t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\n\t}\n\n\tfloat compDelta(vec2 pos) {\n\t\tconst float PI_THIRD = 1.04719755;\n\n\t\tfloat result = .0;\n\t\tfloat s = 1.0;\n\t\tfor (int i = 0; i < 6; ++i) {\n\t\t\tvec2 tc = pos / (20.0 * s);\n\t\t\ttc += rotate(vec2(1.0 + speed, .0), PI_THIRD * float(i));\n\t\t\tresult += s * texture2D(noiseTex, tc).r;\n\t\t\ts *= 1.5;\n\t\t}\n\t\treturn result * scale * .2;\n\t}\n\n\tvoid main() {\n\t\tvec3 viewVec = normalize(camPos - vpos);\n\n\t\tfloat d0 = compDelta(vpos.xz);\n\t\tfloat dx = compDelta(vpos.xz + vec2(.05, .0));\n\t\tfloat dz = compDelta(vpos.xz + vec2(.0, .05));\n\n\t\tvec3 normal = normalize(vec3(d0 - dx, .05, d0 - dz));\n\n\t\tfloat fresnel = clamp(1.0 - 1.25 * dot(viewVec, normal), .0, 1.0);\n\n\t\tfloat shadow = 0.0;\n\t\tif (halfPxSz >= .0) {\n\t\t\tshadow = evalShadow(vpos, 1.0 / gl_FragCoord.w, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);\n\t\t}\n\n\t\tvec3 reflDir = reflect(-viewVec, normal);\n\t\tif (reflDir.y < .02) reflDir.y = 0.04 - reflDir.y;\n\n\t\tvec3 reflCol = texture2D(reflTex, normal2envTC(reflDir)).rgb * lightAmbient.rgb*lightSpecular.w;\n\t\treflCol *= .5 + max(lightDirection.y, .0) * .5; // ?\t+\n\t\tvec3 waterColor = color * (lightAmbient.rgb * lightAmbient.w + (1.0 - shadow) * max(lightDirection.y, .0) * lightDiffuse.rgb * lightDiffuse.w);\n\t\tvec3 finalColor = mix(waterColor, reflCol, .15 + .6 * fresnel);\n\n\t\tvec3 spec = pow(max(dot(reflDir, lightDirection), .001), 80.0) * lightSpecular.rgb * lightSpecular.w * 2.0;\n\t\tfinalColor += (1.0 - shadow) * lightDiffuse.w * spec;\n\n\t\tgl_FragColor = vec4(finalColor, 1.0);\n\t}\n]]></snippet>\n\n</snippets>\n"}});
// COPYRIGHT Â© 2017 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.4/esri/copyright.txt for details.

define(["dojo/text!./WaterMaterial.xml","./internal/MaterialUtil","../lib/RenderSlot","../../../webgl/Program","../lib/DefaultVertexAttributeLocations","../lib/DefaultVertexBufferLayouts","../../../webgl/Util"],function(e,t,r,i,n,o,a){var u=function(e,r,i,n,u,l){t.basicMaterialConstructor(this,l);var f=o.Pos3;this.dispose=function(){},this.getNoiseTextureId=function(){return e},this.getReflTextureId=function(){return r},this.getColor=function(){return i},this.getScale=function(){return n},this.getSpeed=function(){return u},this.getOutputAmount=function(e){return e*a.getStride(f)/4},this.getVertexBufferLayout=function(){return f},this.fillInterleaved=function(e,r,i,n,o,a,u){t.fillInterleaved(e,r,i,n,f,o,a,u)},this.intersect=t.intersectTriangleGeometry,this.getGLMaterials=function(){return{color:s,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:void 0}},this.getAllTextureIds=function(){return[e,r]}},s=function(e,i,n){t.basicGLMaterialConstructor(this,e);var o=r.TRANSPARENT_MATERIAL,a=i.get("water"),u={noiseTextureId:e.getNoiseTextureId(),reflTextureId:e.getReflTextureId()},s=[["noiseTextureId",void 0,"noiseTex"],["reflTextureId",void 0,"reflTex"]];t.multiTextureGLMaterialConstructor(this,n,u,s);var l=e.getColor(),f=e.getScale(),d=e.getSpeed(),h=Date.now();this.beginSlot=function(e){return o===e},this.getProgram=function(){return a},this.bind=function(e,t){e.bindProgram(a),this.bindTextures(e,a),a.setUniform3fv("color",l),a.setUniform1f("scale",f);var r=(Date.now()-h)/1e5*d;r-=Math.floor(r),a.setUniform1f("speed",r),t.shadowMappingEnabled||a.setUniform1f("depthHalfPixelSz",-1)},this.release=function(e){},this.bindView=function(e,r){var i=r.origin;t.bindView(i,r.view,a),t.bindCamPos(i,r.viewInvTransp,a),r.shadowMappingEnabled&&r.shadowMap.bindView(a,i)},this.bindInstance=function(e,t){a.setUniformMatrix4fv("model",t.transformation)},this.getDrawMode=function(e){var t=e.gl;return t.TRIANGLES}};return u.loadShaders=function(t,r,o,a){t._parse(e);var u=new i(a,t.vertexShaderWater,t.fragmentShaderWater,n.Default3D);o.add("water",u)},u});