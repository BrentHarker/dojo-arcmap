require({cache:{
'url:esri/views/3d/terrain/TerrainMaterial.xml':"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<snippets>\n\n<snippet name=\"vsTerrain\"><![CDATA[\n  $vsprecisionf\n\n  uniform mat4 proj;\n  uniform mat4 view;\n  uniform vec3 origin;\n  uniform vec2 texOffset;\n  uniform float texScale;\n  uniform mat4 viewNormal;\n\n  attribute vec3 $position;\n  attribute vec2 $uv0;\n  varying vec2 vtc;\n  varying vec3 vpos;\n  varying vec3 vnormal;\n\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\n  varying vec2 vuv;\n#endif\n\n#ifdef ATMOSPHERE\n  uniform vec3 lightDirection;\n  varying vec3 wpos;\n  varying vec3 wview;\n  varying vec3 wnormal;\n  varying vec3 wlight;\n#endif\n\n#ifdef OVERLAY\n  uniform vec2 overlayTexOffset;\n  uniform vec2 overlayTexScale;\n  varying vec2 vtcOverlay;\n#endif\n\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\n\n  uniform vec4 screenSizePerspective;\n\n  varying float screenSizeDistanceToCamera;\n  varying float screenSizeCosAngle;\n\n#endif\n\n  void main(void) {\n    vpos = $position;\n\n#ifdef SPHERICAL\n    vnormal = normalize(vpos + origin);\n#else\n    vnormal = vec3(0, 0, 1); // WARNING: up-axis dependent code\n#endif\n\n#ifdef ATMOSPHERE\n    wpos = (view * vec4(vpos, 1.0)).xyz;\n    wnormal = (viewNormal * vec4(normalize(vpos+origin), 1.0)).xyz;\n    wlight = (view  * vec4(lightDirection, 1.0)).xyz;\n#endif\n\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\n    vuv = $uv0;\n#endif\n\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\n\n    vec3 viewPos = (view * vec4(vpos, 1.0)).xyz;\n\n    screenSizeDistanceToCamera = length(viewPos);\n\n    vec3 viewSpaceNormal = (viewNormal * vec4(normalize(vpos + origin), 1.0)).xyz;\n    screenSizeCosAngle = abs(viewSpaceNormal.z);\n\n#endif\n\n    gl_Position = proj * view * vec4(vpos, 1.0);\n\n    vtc = $uv0*texScale + texOffset;\n\n#ifdef OVERLAY\n    vtcOverlay = $uv0*overlayTexScale + overlayTexOffset;\n#endif\n  }\n]]></snippet>\n\n<snippet name=\"fsTerrainCommon\"><![CDATA[\n  uniform vec3 lightDirection;\n  uniform vec3 viewDirection;\n  uniform sampler2D depthTex;\n  uniform int shadowMapNum;\n  uniform vec4 shadowMapDistance;\n  uniform mat4 shadowMapMatrix[4];\n  uniform float depthHalfPixelSz;\n  uniform sampler2D ssaoTex;\n  uniform vec4 viewportPixelSz;\n  uniform sampler2D tex;\n  uniform float opacity;\n\n  varying vec3 vpos;\n  varying vec3 vnormal;\n  varying vec2 vtc;\n\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\n  varying vec2 vuv;\n#endif\n\n#ifdef ATMOSPHERE\n  varying vec3 wpos;\n  varying vec3 wview;\n  varying vec3 wnormal;\n  varying vec3 wlight;\n#endif\n\n  $sceneLightingDefinitions\n\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\n  $screenSizePerspective\n\n  uniform vec4 screenSizePerspective;\n\n  varying float screenSizeDistanceToCamera;\n  varying float screenSizeCosAngle;\n#endif\n\n  const vec3 ambient = vec3(0.2,0.2,0.2);\n  const vec3 diffuse = vec3(0.8,0.8,0.8);\n  const float diffuseHardness = 2.5;\n\n#ifdef OVERLAY\n  uniform sampler2D overlayTex;\n  uniform float overlayOpacity;\n  varying vec2 vtcOverlay;\n#endif\n\n#ifdef RECEIVE_SHADOWS\n\t$evalShadow\n#endif\n\n  float lum(vec3 c) {\n    float max = max(max(c.r, c.g), c.b);\n    float min = min(min(c.r, c.g), c.b);\n    return (min + max) * 0.5;\n  }\n\n#ifdef ATMOSPHERE\n  vec3 atmosphere(vec3 lightPos, vec3 normal, vec3 view) {\n    vec3 surfaceColor   = vec3(0.0);\n    vec3 fuzzySpecColor = vec3(1.0);\n    vec3 subColor       = vec3(0.0);\n    float rollOff       = 1.0;\n\n    vec3 Ln = normalize(lightPos);\n    vec3 Nn = normalize(normal);\n    vec3 Hn = normalize(view + Ln);\n\n    float ldn = dot(Ln, Nn);\n    float diffComp = max(0.0, ldn);\n    float vdn = 1.0 - dot(view, Nn);\n    float ndv = dot(view, Ln);\n\n    vec3 diffContrib = surfaceColor * diffComp;\n    float subLamb = max(0.0, smoothstep(-rollOff, 1.0, ldn) - smoothstep(0.0, 1.0, ldn));\n\n    vec3 subContrib = subLamb * subColor;\n    vec3 vecColor = vec3(vdn);\n\n    vec3 diffuseContrib = (subContrib + diffContrib);\n    vec3 specularContrib = (vecColor * fuzzySpecColor);\n\n    return (diffContrib + specularContrib) * rollOff;\n  }\n#endif\n\n  void main() {\n    vec3 a = ambient;\n\n    float shadow = 0.0;\n#ifdef RECEIVE_SHADOWS\n    shadow = evalShadow(vpos, 1.0 / gl_FragCoord.w, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);\n#endif\n    float vndl = dot(normalize(vnormal), lightDirection);\n    float k = smoothstep(0.0, 1.0, clamp(vndl*diffuseHardness, 0.0, 1.0));\n    vec3 d = (1.0 - shadow/1.8) * diffuse * k;\n\n    float ssao = viewportPixelSz.w < .0 ? 1.0 : texture2D(ssaoTex, (gl_FragCoord.xy - viewportPixelSz.xy) * viewportPixelSz.zw).a;\n    vec4 texCol = texture2D(tex, vtc);\n\n#ifdef OVERLAY\n    if ((vtcOverlay.x > 0.0) && (vtcOverlay.y > 0.0) && (vtcOverlay.x < 1.0) && (vtcOverlay.y < 1.0)) {\n      vec4 overlayTexCol = texture2D(overlayTex, vtcOverlay);\n      overlayTexCol *= overlayOpacity;\n      texCol = texCol * (1.0 - overlayTexCol.a) + overlayTexCol; // texCol and overlayTexCol have pre-multiplied alpha\n    }\n#endif\n\n    vec3 atm = vec3(0.0);\n#ifdef ATMOSPHERE\n    float ndotl = max(0.0, min(1.0, vndl));\n    atm = atmosphere(wlight, wnormal, -viewDirection);\n    atm *= max(0.0, min(1.0, (1.0-lum(texCol.rgb)*1.5))); //avoid atmosphere on bright base maps\n    atm *= max(0.0, min(1.0, ndotl*2.0)); // avoid atmosphere on dark side of the globe\n#endif\n\n    vec3 albedo = atm + texCol.rgb;\n    vec3 normal = normalize(vnormal);\n\n    // heuristic shading function used in the old terrain, now used to add ambient lighting\n    float additionalAmbientScale = smoothstep(0.0, 1.0, clamp(vndl*2.5, 0.0, 1.0));\n\t\tvec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n    gl_FragColor = vec4(evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight), texCol.a) * opacity;\n\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\n    // This is only used for debug rendering the screenSize perspective\n\n    float perspectiveScale = screenSizePerspectiveScaleFloat(1.0, screenSizeCosAngle, screenSizeDistanceToCamera, screenSizePerspective);\n\n    if (perspectiveScale <= 0.25) {\n      gl_FragColor = mix(gl_FragColor, vec4(1, 0, 0, 1), perspectiveScale * 4.0);\n    }\n    else if (perspectiveScale <= 0.5) {\n      gl_FragColor = mix(gl_FragColor, vec4(0, 0, 1, 1), (perspectiveScale - 0.25) * 4.0);\n    }\n    else if (perspectiveScale >= 0.99) {\n      gl_FragColor = mix(gl_FragColor, vec4(0, 1, 0, 1), 0.2);\n    }\n    else {\n      gl_FragColor = mix(gl_FragColor, vec4(1, 0, 1, 1), (perspectiveScale - 0.5) * 2.0);\n    }\n\n#endif\n\n  // closing } is missing here, it's in the shaders using this snippet below\n\n]]></snippet>\n\n<snippet name=\"fsTerrainWireframe\"><![CDATA[\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n  $fsprecisionf\n\n  struct WireframeSettings {\n    float width;\n    float falloff;\n    float subdivision;\n    vec4 color;\n    float wireOpacity;\n    float surfaceOpacity;\n  };\n\n  uniform WireframeSettings wireframe;\n\n    $fsTerrainCommon\n\n    vec2 dVuv;\n    vec2 vuvScaled = vuv * wireframe.subdivision;\n    vec2 vuvMod = fract(vuvScaled);\n\n#ifdef GL_OES_standard_derivatives\n    dVuv = fwidth(vuvScaled);\n#else\n    // Something that reasonably works\n    dVuv = vec2(0.05);\n#endif\n\n    vec2 edgeFactors = smoothstep((wireframe.width - wireframe.falloff) * dVuv,\n                                  wireframe.width * dVuv, min(vuvMod, 1.0 - vuvMod));\n\n    float edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);\n\n#ifdef WIREFRAME\n    gl_FragColor = vec4(mix(gl_FragColor.rgb, wireframe.color.rgb, edgeFactor * wireframe.color.a),\n                        mix(wireframe.surfaceOpacity, wireframe.wireOpacity, edgeFactor));\n#endif\n\n\n#ifdef TILE_BORDERS\n    dVuv = fwidth(vuv);\n    edgeFactors = smoothstep((wireframe.width - wireframe.falloff) * dVuv,\n                              wireframe.width * dVuv, min(vuv, 1.0 - vuv));\n    edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);\n\n    gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 0.0, 1.0), edgeFactor);\n#endif\n  }\n]]></snippet>\n\n<snippet name=\"fsTerrain\"><![CDATA[\n    $fsprecisionf\n    $fsTerrainCommon\n  }\n]]></snippet>\n\n<snippet name=\"vsTerrainNormal\"><![CDATA[\n  $vsprecisionf\n\n  uniform vec3 origin;\n  uniform mat4 proj;\n  uniform mat4 view;\n  uniform mat4 viewNormal;\n  attribute vec3 $position;\n  varying vec3 vnormal;\n\n  void main(void) {\n#ifdef SPHERICAL\n    vec4 normal = vec4(normalize($position + origin), 1.0);\n#else\n    vec4 normal = vec4(0.0, 1.0, 0.0, 1.0);\n#endif\n\n    gl_Position = proj * view * vec4($position, 1.0);\n    vnormal = normalize((viewNormal * normal).xyz);\n  }\n]]></snippet>\n\n<snippet name=\"vsTerrainDepthOnly\"><![CDATA[\n  $vsprecisionf\n\n  uniform mat4 proj;\n  uniform mat4 view;\n\n  attribute vec3 $position;\n\n  void main() {\n    gl_Position = proj * view * vec4($position, 1.0);\n  }\n]]></snippet>\n\n<snippet name=\"fsTerrainDepthOnly\"><![CDATA[\n  $fsprecisionf\n\n  void main() {\n  }\n]]></snippet>\n\n<snippet name=\"vsTerrainHighlight\"><![CDATA[\n  $vsprecisionf\n\n  uniform mat4 proj;\n  uniform mat4 view;\n  uniform vec2 overlayTexScale;\n  uniform vec2 overlayTexOffset;\n\n  attribute vec3 $position;\n  attribute vec2 $uv0;\n\n  varying vec2 vtcOverlay;\n\n  void main() {\n    vtcOverlay = $uv0*overlayTexScale + overlayTexOffset;\n\n    gl_Position = proj * view * vec4($position, 1.0);\n  }\n]]></snippet>\n\n<snippet name=\"fsTerrainHighlight\"><![CDATA[\n  $fsprecisionf\n\n  uniform sampler2D overlayTex;\n\n  uniform sampler2D depthTex;\n  uniform vec4 highlightViewportPixelSz;\n\n  varying vec2 vtcOverlay;\n\n  void main() {\n    vec4 texCol = vec4(0,0,0,0);\n    if ((vtcOverlay.x > 0.0) && (vtcOverlay.y > 0.0) && (vtcOverlay.x < 1.0) && (vtcOverlay.y < 1.0)) {\n      texCol = texture2D(overlayTex, vtcOverlay);\n    }\n\n    if (texCol.a == 0.0) {\n      // Here we have to write black, instead of discarding the fragment in order to overwrite\n      // the highlights which might have been written by skirts of other tiles.\n      // As a consequence skirts are not visible, but terrain overwrites draped highlights.\n      gl_FragColor = vec4(0,0,0,0);\n      return;\n    }\n\n    $highlightWrite\n  }\n]]></snippet>\n\n</snippets>\n"}});
// COPYRIGHT © 2017 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.4/esri/copyright.txt for details.

define(["dojo/when","./tileUtils","./TerrainConst","./TileGeometryFactory","./TileRenderData","./ResourceCounter","./TileRenderer","../support/PreallocArray","../../../core/ObjectPool","../../../core/promiseUtils","../support/imageUtils","../webgl-engine/lib/ShaderVariations","dojo/text!./TerrainMaterial.xml","../webgl-engine/materials/internal/MaterialUtil","../webgl-engine/lib/Util","../lib/glMatrix","../webgl-engine/lib/RenderPass","../webgl-engine/lib/RenderSlot","../webgl-engine/lib/tracer","../../webgl/Texture","../../webgl/VertexArrayObject","../../webgl/BufferObject","../../webgl/Program","../webgl-engine/lib/DefaultVertexAttributeLocations","../webgl-engine/lib/DefaultVertexBufferLayouts","../webgl-engine/lib/screenSizePerspectiveUtils","../../webgl/Util"],function(e,t,r,i,n,a,s,l,o,d,h,u,c,f,g,v,p,m,T,R,b,D,x,y,S,E,w){var _=g.assert,A=v.vec2d,O=v.vec3d,I=v.vec4d,P=v.mat4d.identity(),N=4,M=[2,2],U=m.OPAQUE_TERRAIN,L=m.TRANSPARENT_TERRAIN,H=O.create(),G=7,B=10,C=A.create(),F=function(g,v,m){function A(){for(;Se.length<Se.data.length&&we.length>0;){var e=we.pop();Se.push(e)}Ee=Se.length}function F(){for(var e=0;e<Se.length;e++){var t=Se.data[e];_e.release(t),t.callback(e>=Ee),t.callback=null}Se.clear()}function j(e,t){var r=e.screenDepth,i=t.screenDepth;return i>r?-ue:r>i?ue:0}function k(e,t){return 0===e.tiles.length?-ue:0===t.tiles.length?ue:j(e.tiles.data[0],t.tiles.data[0])}function V(e){for(var t=e.extent,r=e.lij[0],i=0;Ee>i;){var n=Se.data[i],a=n.extent;r>=n.minLevel&&r<=n.maxLevel&&a[0]<=t[2]&&a[2]>=t[0]&&a[1]<=t[3]&&a[3]>=t[1]?(Se.swap(i,Ee-1),Ee--):i++}}v=v||256;var W,z,q,Y=!1,X=null,Z=null,Q=null,J={},K=new o(n),$=new l(10,function(){return{root:null,tiles:new l(300)}}),ee=!0,te=new t.IteratorPreorder,re=null,ie=!0,ne=1,ae=!0,se=!1,le={mode:"none",width:1.5,falloff:1.5,wireOpacity:1,surfaceOpacity:0,color:[1,1,1,0],resolution:64},oe=!1,de=!1,he=!1,ue=1,ce=!0,fe=!0,ge=null,ve=null,pe=null,me=!1,Te=[];this.updateTileBackground=function(e){return pe&&pe.cancel(),pe=e?h.requestImage(e).otherwise(function(){return null}):d.resolve(null),this.renderTileBackground(),pe};var Re=0,be=0,De=0,xe=0;this.resourceCounter=new a,this.castShadows=!0,this.clippingExtent=null,this.loaded=function(){};var ye=!1;this.needsRender=!0,this.didRender=!1,this.needsHighlight=!1,this.receiveShadows=!1;var Se=new l(10),Ee=0,we=new l(30),_e=new o(function(){this.extent=I.create(),this.minLevel=0,this.maxLevel=0,this.callback=null},!1);this.renderTileBackground=function(){return z&&pe&&ve?pe.then(function(e){me=!0,ve.setGridImage(e),X&&t.traverseTilesPreorder(X,function(e){ve.updateTileTexture(e)}.bind(this))}.bind(this)):void 0},this.initializeRenderContext=function(t){z=t.rctx,q=t.rctx.gl;var r=function(t){e(t).then(function(){Y=!0,this.setNeedsRender()}.bind(this)).otherwise(r)}.bind(this);r(this.renderTileBackground()),W=t.textureRep;var i=t.shaderSnippets,n=t.shaderRep,a=t.programRep;i.vsTerrain||i._parse(c),z.extensions.standardDerivatives;var l=new u("terrain",["vsTerrain","fsTerrain"],null,a,n,i,z);l.addDefine("Spherical","SPHERICAL"),l.addDefine("Overlay","OVERLAY"),l.addDefine("Atmosphere","ATMOSPHERE"),l.addDefine("Wireframe","WIREFRAME"),l.addDefine("TileBorders","TILE_BORDERS"),l.addBinaryShaderSnippetSuffix("Wireframe","Wireframe",[!1,!0]),l.addDefine("ReceiveShadows","RECEIVE_SHADOWS"),l.addDefine("ScreenSizePerspective","SCREEN_SIZE_PERSPECTIVE");var o=new u("terrainNormal",["vsTerrainNormal","fsNormal"],null,a,n,i,z);o.addDefine("Spherical","SPHERICAL"),o.addDefine("AlphaZero","ALPHA_ZERO"),Q={depth:a.get("depth"),depthShadowMap:a.get("depthShadowMap"),depthOnly:new x(z,i.vsTerrainDepthOnly,i.fsTerrainDepthOnly,y.Default3D),highlight:new x(z,i.vsTerrainHighlight,i.fsTerrainHighlight,y.Default3D)},Z={color:l,normal:o},this._updatePrograms(),ve=new s(z,v,a,this.resourceCounter,this.setNeedsRender.bind(this)),this.renderTileBackground(),ge=new R(z,{target:q.TEXTURE_2D,pixelFormat:q.RGBA,dataType:q.UNSIGNED_BYTE,samplingMode:q.NEAREST,width:4,height:4})},this.uninitializeRenderContext=function(e){null!=ge&&(ge.dispose(),ge=null),ve&&(ve.dispose(),ve=null)},this._updatePrograms=function(){var e="spherical"===g,t="shader"===le.mode;Q.color=Z.color.getProgram([e,!0,e&&fe,t,oe,t||oe,this.receiveShadows,se]),Q.normal=Z.normal.getProgram([e,!0]),this.setNeedsRender()},this.install=function(e){e.addExternalRenderer([U,L],this)},this.uninstall=function(e){e.removeExternalRenderer(this)},this.setRootTiles=function(e){X=e,this.setNeedsRender()},this.setNeedsHighlight=function(e){this.needsHighlight=e,this.setNeedsRender()},this.setStencilEnabledLayerExtents=function(e){Te=e,this.setNeedsRender()},this.setTileSize=function(e){v=e,ve&&(ve.tileSize=e),this.setNeedsRender()},this.loadTile=function(e){_(null===e.renderData),e.renderData=K.acquire(),e.renderData.init();var t=this.getLocalOriginOfTile(e),r=e.createGeometry(e.renderData.updateGeometryState(e),t,"debug"===le.mode,e.renderData.geometryInfo);e.renderData.localOrigin=t,this._setTileGeometry(e,r),me&&ve.updateTileTexture(e)},this.queryVisibleLevelRange=function(e,t,r,i){var n=_e.acquire();I.set(e,n.extent),t?n.minLevel=t:n.minLevel=-Number.MAX_VALUE,null!=r?n.maxLevel=r:n.maxLevel=Number.MAX_VALUE,n.callback=i,we.push(n),this.setNeedsRender()},this.updateTileTexture=function(e){ve&&me&&ve.updateTileTexture(e)},this.updateTileGeometryNeedsUpdate=function(e){return e.renderData.updateGeometryState(e).needsUpdate},this._updateTileGeometry=function(e){for(var t=e.renderData.geometryState,i=e.layerInfo[r.LayerClass.ELEVATION],n=0;n<i.length;n++)i[n].pendingUpdates&=~r.TileUpdateTypes.UPDATE_GEOMETRY;if(t.needsUpdate){e.renderData.vao&&this._releaseTileGeometry(e);var a=e.createGeometry(t,e.renderData.localOrigin,"debug"===le.mode,e.renderData.geometryInfo);return this._setTileGeometry(e,a),!0}return!1},this.updateTileGeometry=function(e){return e.renderData.updateGeometryState(e),this._updateTileGeometry(e)},this.unloadTile=function(e){this._releaseTileGeometry(e),e.renderData.texture&&e.renderData.texture.dispose(),K.release(e.renderData),e.renderData=null},this.getLocalOriginOfTile=function(e){if(e.lij[0]>=B){for(;e.lij[0]>G;)e=e.parent;return e.centerAtSeaLevel}if("spherical"===g)return H;for(;e.parent;)e=e.parent;return e.centerAtSeaLevel},this.setVisibility=function(e){ie=e,this.setNeedsRender()},this.getStats=function(){return{numTilesRendered:be,numTilesCulled:De,numTrianglesRendered:Re,numOriginsRendered:xe}},this.setDisableRendering=function(e){de=!!e,this.setNeedsRender()},this.getOpacity=function(){return ne},this.getWireframeEnabled=function(){return"shader"===le.mode},this.setDebugScreenSizePerspective=function(e){e!==se&&(se=e,this._updatePrograms())},this.setWireframe=function(e){if(e&&e!==!0||(e={mode:e?"shader":"none"}),void 0!==e.mode&&le.mode!==e.mode){var r="debug"===le.mode,i="debug"===e.mode;le.mode=e.mode,this._updatePrograms(),r!==i&&X&&t.traverseTilesPreorder(X,function(e){if(e.renderData){e.renderData.vao&&this._releaseTileGeometry(e);var t=e.createGeometry(e.renderData.updateGeometryState(e),e.renderData.localOrigin,i,e.renderData.geometryInfo);this._setTileGeometry(e,t)}}.bind(this))}for(var n in e)le.hasOwnProperty(n)&&(le[n]=e[n]),this.setNeedsRender();le.resolution&&(le.resolution=Math.min(le.resolution,v),le.resolution=1<<Math.round(Math.log(le.resolution)/Math.LN2))},this.setOpacity=function(e){ne=e,this.setNeedsRender()},this.setDrawSkirts=function(e){ae=e,this.setNeedsRender()},this.setCullBackFaces=function(e){he=e,this.setNeedsRender()},this.setRenderOrder=function(e){ue=e,this.setNeedsRender()},this.setBorders=function(e){oe!==e&&(oe=e,this._updatePrograms())},this.setFrontMostTransparent=function(e){ce!==e&&(ce=e,this.setNeedsRender())},this.setVelvetOverground=function(e){fe!==e&&(fe=e,this._updatePrograms())},this.setNeedsRender=function(){this.needsRender=!0,this.didRender=!1,ee=!0},this.resetNeedsRender=function(){this.didRender&&(this.needsRender=0!==we.length,this.didRender=!1)};var Ae=O.create();this.isTransparent=function(){return 1>ne||"shader"===le.mode&&(le.wireOpacity<1||le.surfaceOpacity<1)},this._renderMaterialPass=function(e,t){var r=this.isTransparent(),i=e.shadowMap&&e.shadowMap.getEnableState();this.receiveShadows!=i&&(this.receiveShadows=i,this._updatePrograms());var n=e.camera;if(z.setDepthTestEnabled(!0),z.setBlendingEnabled(r),r&&z.setBlendFunctionSeparate(q.SRC_ALPHA,q.ONE_MINUS_SRC_ALPHA,q.ONE,q.ONE_MINUS_SRC_ALPHA),r&&ce){var a=Q.depthOnly;z.bindProgram(a),z.setColorMask(!1,!1,!1,!1),z.setDepthWriteEnabled(!0),this._renderTilesAuxilliary(e,a,t),z.setColorMask(!0,!0,!0,!0),z.setDepthFunction(q.EQUAL),z.setDepthWriteEnabled(!1)}else z.setDepthFunction(q.LESS);var s=Q.color;z.bindProgram(s),s.setUniform1f("opacity",ne),("shader"===le.mode||oe)&&(s.setUniform1f("wireframe.width",le.width),s.setUniform1f("wireframe.falloff",Math.min(le.width,le.falloff)),s.setUniform1f("wireframe.wireOpacity",le.wireOpacity*ne),s.setUniform1f("wireframe.surfaceOpacity",le.surfaceOpacity*ne),s.setUniform4fv("wireframe.color",le.color));var n=e.camera;e.shadowMap&&e.shadowMap.bind(s),e.ssaoHelper&&e.ssaoHelper.setUniforms(s),s.setUniform1i("tex",N),s.setUniform1i("overlayTex",N+1),s.setUniformMatrix4fv("viewNormal",n.viewInverseTransposeMatrix),s.setUniformMatrix4fv("proj",n.projectionMatrix),e.lightingData.helper.setUniforms(s,!0);var l=n.viewMatrix;O.set3(l[12],l[13],l[14],Ae),O.normalize(Ae),s.setUniform3fv("viewDirection",Ae),be=0,De=0,Re=0,xe=0,A(),this._renderTiles(e,s,t),z.setBlendingEnabled(!1),z.setDepthFunction(q.LESS),z.setDepthWriteEnabled(!0),F(),be>0&&!ye&&(ye=!0,this.loaded&&this.loaded())},this._renderDepthPass=function(e,t,r){var i=e.camera;z.bindProgram(t),z.setBlendingEnabled(!1),z.setDepthTestEnabled(!0),z.setDepthFunction(q.LESS),t.setUniformMatrix4fv("model",P),t.setUniformMatrix4fv("viewNormal",i.viewInverseTransposeMatrix),C[0]=i.near,C[1]=i.far,t.setUniform2fv("nearFar",C),this._renderTilesAuxilliary(e,t,r)},this._renderNormalPass=function(e,t){var r=e.camera,i=Q.normal;z.bindProgram(i),z.setBlendingEnabled(!1),z.setDepthTestEnabled(!0),z.setDepthFunction(q.LESS),i.setUniformMatrix4fv("viewNormal",r.viewInverseTransposeMatrix),this._renderTilesAuxilliary(e,i,t)},this._renderHighlightPass=function(e,t){var r=Q.highlight;z.bindProgram(r),z.setBlendingEnabled(!1),z.setDepthTestEnabled(!0),z.setDepthFunction(q.LESS);var i=e.offscreenRenderingHelper;z.bindTexture(i.getDepthTexture(),N+2),r.setUniform1i("depthTex",N+2),r.setUniform4f("highlightViewportPixelSz",0,0,1/i.width,1/i.height),this._renderTilesAuxilliary(e,r,t,!0)},this.render=function(e){if(Y&&!de&&ie&&X&&me){var t=this.isTransparent(),r=t?L:U;if(e.slot===r){T.trace("# BEGIN RENDER TERRAIN");var i=e.pass;z.setFaceCullingEnabled(he);var n=1===e.lightingData.helper.globalFactor;if(i===p.MATERIAL)this._renderMaterialPass(e,this._updatePerOriginTileData());else if(i===p.MATERIAL_DEPTH_SHADOWMAP&&this.castShadows&&n)this._renderDepthPass(e,Q.depthShadowMap,this._updatePerOriginTileData());else if(i===p.MATERIAL_DEPTH)this._renderDepthPass(e,Q.depth,this._updatePerOriginTileData());else if(i===p.MATERIAL_NORMAL)this._renderNormalPass(e,this._updatePerOriginTileData());else if(i===p.MATERIAL_HIGHLIGHT&&this.needsHighlight){this._renderHighlightPass(e,this._updatePerOriginTileData());var a=z.gl;z.clear(a.DEPTH_BUFFER_BIT)}return he&&z.setFaceCullingEnabled(!1),T.trace("# END RENDER TERRAIN"),!0}}},this._updatePerOriginTileData=function(){if(!ee)return $;if(re=null,this._renderCollectOrigins(),0!==ue){for(var e=0;e<$.length;e++)this._sortFrontToBack($.data[e].tiles,j);this._sortFrontToBack($,k)}return ee=!1,$},this._renderCollectOrigins=function(){$.clear();for(var e=0;e<X.length;e++){var t=X[e],r=$.next();r.root=t,"spherical"===g?r.origin=H:r.origin=t.centerAtSeaLevel,r.tiles.clear(),this._renderCollectOriginsForRoot(r)}return!0},this._renderCollectOriginsForRoot=function(e){for(te.reset(e.root);!te.done;){var t=te.next(),r=t.renderData;if(!r||t.visible){var i=$.peek();if(t.lij[0]===G&&((i===e||0!==i.tiles.length)&&(i=$.next(),i.tiles.clear()),i.root=t,i.origin=t.centerAtSeaLevel),r){var n=t.lij[0];n>=B?$.peek().tiles.push(t):e.tiles.push(t),(!re||t.vlevel>re.vlevel)&&(re=t),te.skip()}}else De++,te.skip()}},this._sortFrontToBack=function(e,t){e.sort(t)},this._updateStencilReadStateForTile=function(e,t){if(e.stencilRenderingHelper&&e.stencilRenderingHelper.getEnableState()){for(var r=!1,i=0;i<Te.length;i++)if(t.intersectsExtent(Te[i])){r=!0;break}r?e.stencilRenderingHelper.enableStencilRead():e.stencilRenderingHelper.disableStencilRead()}},this._renderTilesAuxilliary=function(e,t,r,i){var n=e.camera,a=n.viewMatrix,s=e.rctx;t.setUniformMatrix4fv("proj",n.projectionMatrix),i&&t.setUniform1i("overlayTex",N+1);for(var l=0;l<r.length;l++){var o=r.data[l];t.setUniform3fv("origin",o.origin),f.bindView(o.origin,a,t);for(var d=0;d<o.tiles.length;d++){var h=o.tiles.data[d],u=h.renderData;i&&(u.highlightOverlayTexId?Oe(t,u,u.highlightOverlayTexId):s.bindTexture(ge,N+1)),this._updateStencilReadStateForTile(e,h),s.bindVAO(u.vao),w.assertCompatibleVertexAttributeLocations(u.vao,t);var c=u.vao.indexBuffer.size;ae||(c=u.geometryInfo.numWithoutSkirtIndices),s.drawElements(q.TRIANGLES,c,u.vao.indexBuffer.indexType,0)}}s.bindVAO(null),s.stencilRenderingHelper&&s.stencilRenderingHelper.disableStencilRead()},this._renderTiles=function(e,t,r){var i=e.camera,n=i.viewMatrix;if(se){var a=E.getSettings(g);a.update({distance:m.distanceToSurface,fovY:m.fovY}),f.bindScreenSizePerspective(a,t,"screenSizePerspective")}for(var s=0;s<r.length;s++){var l=r.data[s];t.setUniform3fv("origin",l.origin),f.bindView(l.origin,n,t),e.shadowMap&&e.shadowMap.bindView(t,l.origin),xe++;var o=l.tiles;if(0!==o.length){var d=q.TRIANGLES;"debug"===le.mode&&(d=q.LINES);var h,u,c=re;c?(h=c.vlevel,u=v/le.resolution):(h=16,u=v/64);for(var p=0;p<o.length;p++){var R=o.data[p],l=R.renderData;this._updateStencilReadStateForTile(e,R),T.trace("# RENDER TILE "+R.lij[0]+"/"+R.lij[1]+"/"+R.lij[2]+", screenDepth:"+R.screenDepth),t.setUniform2fv("texOffset",l.texOffset),t.setUniform1f("texScale",l.texScale);var b=l.textureReference||l.texture;if(z.bindTexture(b,N),l.overlayTexId?Oe(t,l,l.overlayTexId):(t.setUniform2fv("overlayTexOffset",M),z.bindTexture(ge,N+1)),"shader"===le.mode||oe){var D=u*(1<<h-R.vlevel);t.setUniform1f("wireframe.subdivision",D)}var x=l.vao.indexBuffer.size;ae||(x=l.geometryInfo.numWithoutSkirtIndices),z.bindVAO(l.vao),w.assertCompatibleVertexAttributeLocations(l.vao,t),z.drawElements(d,x,l.vao.indexBuffer.indexType,0),R.renderOrder=be,be++,Re+=x/3,V(R)}}}z.bindVAO(null),e.stencilRenderingHelper&&e.stencilRenderingHelper.disableStencilRead()};var Oe=function(e,t,r){var i=J[r];i||(i=W.aquire(r).getGLTexture(),_(i),J[r]=i),e.setUniform2fv("overlayTexOffset",t.overlayTexOffset),e.setUniform2fv("overlayTexScale",t.overlayTexScale),e.setUniform1f("overlayOpacity",t.overlayOpacity),z.bindTexture(i,N+1)},Ie=O.create(),Pe=O.create(),Ne=O.create(),Me=this.clippingExtent;this.intersect=function(e,r,i){if(X&&(!e.isSelection||!this.isTransparent())){O.subtract(i,r,Ie);var n=e.getMinResult(),a=e.getMaxResult();te.reset(X);for(var s={};!te.done;){var l=te.next();if(null!==l.renderData){if(e.enableInvisibleTerrain){if(!l.visible&&Me&&!l.intersectsExtent(Me))continue}else if(!l.visible)continue;var o=l.renderData.geometryInfo.geometry,d=l.renderData.localOrigin;O.subtract(r,d,Pe),O.subtract(i,d,Ne),f.intersectTriangleGeometry(o,s,void 0,e,Pe,Ne,function(r,i,s){if((ae||!(3*s>=l.renderData.geometryInfo.numWithoutSkirtIndices))&&r>=0&&(e.enableBackfacesTerrain||O.dot(i,Ie)<0)){var o;(void 0===n.dist||r<n.dist)&&(o=t.lij2str(l.lij[0],l.lij[1],l.lij[2]),n.set(void 0,o,r,i,void 0),n.setIntersector("terrain")),(void 0===a.dist||r>a.dist)&&(o=t.lij2str(l.lij[0],l.lij[1],l.lij[2]),a.set(void 0,o,r,i,void 0),a.setIntersector("terrain"))}})}}}},this._setTileGeometry=function(e,t){var r=e.renderData,n=t.geometry.getData(),a=n.getVertexAttr().terrain.data,s=n.getFaces()[0].indices.terrain;r.vao=new b(z,y.Default3D,{geometry:S.Pos3Tex},{geometry:D.createVertex(z,q.STATIC_DRAW,a)},D.createIndex(z,q.STATIC_DRAW,s)),r.geometryInfo.geometry&&i.releaseGeometry(r.geometryInfo.geometry),r.geometryInfo=t,this.setNeedsRender()},this._releaseTileGeometry=function(e){var t=e.renderData;t.vao.dispose(!0),t.vao=null,t.geometryInfo.geometry&&i.releaseGeometry(t.geometryInfo.geometry),t.geometryInfo.geometry=null,this.setNeedsRender()}};return F.TileRenderData=n,F});